function [ber, numBits] = gray_bertool(EbNo, maxNumErrs, maxNumBits)    import com.mathworks.toolbox.comm.BERTool;    totErr  = 0;    numBits = 0;    M = 8;                     % Size of signal constellation    k = log2(M);                % Number of bits per symbol    n = 1000;                   % Number of bits to process    nsamp = 1;                  % Oversampling rate    while((totErr < maxNumErrs) && (numBits < maxNumBits))       if (BERTool.getSimulationStop)          break;       end        x = sign(randn(1,n));        x=(ones(1,n)+x)/2;        x=x';        y = pskmod(x,M);        SNR = EbNo + 10*log10(k) - 10*log10(nsamp);        ynoisy = awgn(y,SNR,'measured');        z = pskdemod(ynoisy,M);        [number_of_errors,bit_error_rate] = biterr(x,z);        totErr = totErr + number_of_errors;        numBits = numBits + n;    endber = totErr/numBits;